esphome:
  name: geiger

esp32:
  board: esp32thing
  framework:
    type: arduino


logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  safe_mode: true
  password: !secret ota_password

mqtt:
  broker: mqtt.local


external_components:
  - source:
      type: git
      url: https://github.com/esphome/esphome
      ref: dev
    components: [ mpr121 ] # upstream in 2024.6

i2c:
  sda: 26
  scl: 27
  scan: true

mpr121:
  id: mpr121_component
  address: 0x5A
  touch_debounce: 1
  release_debounce: 1
  touch_threshold: 10
  release_threshold: 7


text_sensor:
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
    state_topic: esphome/geiger/version

sensor:
  - platform: wifi_signal
    name: "WiFi Signal dB"
    update_interval: 10s
    state_topic: esphome/geiger/wifi_signal
    retain: false

    # https://devices.esphome.io/devices/geiger-counter
  - platform: pulse_counter
    id: geiger
    internal_filter: 0s
    use_pcnt: false # hw counter is unreliable?
    pin:
      number: 16
      mode:
        input: true
        pulldown: false
        pullup: false
    name: "Ionizing Radiation"
    state_topic: geiger
    count_mode:
     rising_edge: DISABLE
     falling_edge: INCREMENT
    unit_of_measurement: 'Î¼Sv/h'
    filters:
      - multiply: 0.006622516556291391
    on_value:
      then:
        - component.update: epaper

output:
  - id: led_and_ext_5v_power
    platform: gpio
    pin:
      mpr121: mpr121_component
      number: 10
      mode: OUTPUT
      inverted: true


spi:
  clk_pin: 18
  mosi_pin: 5

font:
  - file: "gfonts://Roboto"
    id: font_big
    size: 32

image:
  - file: resources/banana.svg # https://www.svgrepo.com/svg/450644/banana
    id: banana
    resize: 48x48

display:
  - platform: waveshare_epaper
    id: epaper
    model: 2.90in-dke
    cs_pin: 19
    dc_pin: 21
    busy_pin: 22
    reset_pin: 23
    update_interval: 60s
    rotation: 270
    lambda: |-
      char label[32];
      snprintf(label, sizeof(label), "%f uSv/h", id(geiger).state);

      int label_w, _;
      id(font_big).measure(label, &label_w, &_, &_, &_);
      it.printf(it.get_width()/2 - label_w/2, 10, id(font_big), "%s", label);

      const float banana_dose = 0.1; // https://en.wikipedia.org/wiki/Banana_equivalent_dose
      for (int i = 0; i < max(1.0f, id(geiger).state / banana_dose); i++) {
        int x = i * id(banana).get_width();
        it.image(x, it.get_height() - id(banana).get_height(), id(banana));
      }
