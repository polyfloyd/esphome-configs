esphome:
  name: buienalarm

esp32:
  board: esp32thing
  framework:
    type: arduino

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  safe_mode: true
  password: !secret ota_password

mqtt:
  broker: mqtt.local


spi:
  clk_pin: 18
  mosi_pin: 5


text_sensor:
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
    state_topic: esphome/buienalarm/version

sensor:
  - platform: wifi_signal
    name: "WiFi Signal dB"
    update_interval: 10s
    state_topic: esphome/buienalarm/wifi_signal
    retain: false

globals:
  - id: temperature
    type: double
    restore_value: true
  - id: rain
    type: double[25]
    restore_value: true
  - id: rain_start
    type: int # minutes since 00:00
    restore_value: true
  - id: lat
    type: double
    initial_value: !secret home_lat
  - id: lon
    type: double
    initial_value: !secret home_lon

http_request:
  useragent: esphome/device
  timeout: 10s

time:
  - platform: sntp
    on_time:
      - seconds: 0
        minutes: /5
        then:
          - lambda: |-
              HTTPClient http;
              char url[160];
              snprintf(url, sizeof(url), "https://cdn-secure.buienalarm.nl/api/3.4/forecast.php?lat=%.5f&lon=%.5f&region=nl&unit=mm/u", id(lat), id(lon));
              http.begin(url);
              int status = http.GET();
              ESP_LOGD("rain", "GET buienalarm.nl -> %d", status);
              String payload = http.getString();
              ESP_LOGD("rain", "GET buienalarm.nl -> %s", payload.c_str());
              if (status != 200) {
                return;
              }

              DynamicJsonDocument doc(1024);
              deserializeJson(doc, payload);

              double temp = id(temperature) = doc["temp"];
              ESP_LOGD("rain", "temp -> %.1f °C", temp);

              const char *start_human = doc["start_human"];
              int hh, mm;
              sscanf(start_human, "%d:%d", &hh, &mm);
              id(rain_start) = hh*60 + mm;

              for (int i = 0; i < 25; i++) {
                double mm = id(rain)[i] = doc["precip"][i];
                ESP_LOGD("rain", "precip %d -> %.2f mm/h", i, mm);
              }

              id(epaper).update();


font:
  - file: "gfonts://Roboto"
    id: font_big
    size: 26
  - file: "gfonts://Roboto"
    id: font_medium
    size: 20
  - file: "gfonts://Roboto"
    id: font_small
    size: 13

display:
  - platform: waveshare_epaper
    id: epaper
    model: 2.90in-dke
    cs_pin: 19
    dc_pin: 21
    busy_pin: 22
    reset_pin: 23
    update_interval: 300s
    rotation: 270
    lambda: |-
      // temperature in top left
      it.printf(0, 0, id(font_medium), "%.0f °C", id(temperature));

      // "mm/h" in top right
      int mmh_x = it.get_width() - 24 - 40;
      it.filled_rectangle(mmh_x, 0, 40, 16);
      it.printf(mmh_x+2, 0, id(font_small), COLOR_OFF, "mm/h");

      double mmh_max = 0;
      for (int i = 0; i < 25; i++) {
        mmh_max = max(mmh_max, id(rain)[i]);
      }

      // conditional no rain banner in the centre
      if (mmh_max == 0) {
        const char *label = "No rain expected";
        int width, x_offset, baseline, _;
        id(font_big).measure(label, &width, &x_offset, &baseline, &_);
        int x = it.get_width()/2 - width/2;
        int y = it.get_height()/2 - baseline/2;
        it.printf(x, y, id(font_big), label);
      }

      int font_small_h = id(font_small).get_baseline();
      int line_y = it.get_height() - font_small_h;

      // the line between the timestamps below and rain bars above
      it.horizontal_line(0, line_y, it.get_width());

      const int num_bars = 8;
      const int bar_w = it.get_width() / num_bars;
      const int bar_max_h = 80;
      const int time_interval = 5; // minutes
      const double mmh_clip = 2.5;

      for (int i = 0; i < num_bars; i++) {
        double mmh = id(rain)[i*2];
        int time = id(rain_start) + time_interval * i*2;

        int bar_x = bar_w * i;

        it.printf(bar_x + 2, it.get_height() - font_small_h, id(font_small), "%02d:%02d", time/60%24, time%60);

        int bar_h = (min(mmh, mmh_clip) / mmh_clip) * bar_max_h;
        it.filled_rectangle(bar_x+2, line_y-bar_h, bar_w-4, bar_h);

        char mmh_s[16];
        snprintf(mmh_s, sizeof(mmh_s), "%.1f", mmh);
        int mmh_w, _;
        id(font_small).measure(mmh_s, &mmh_w, &_, &_, &_);
        it.printf(bar_x + bar_w/2 - mmh_w/2, line_y - font_small_h - 2 - bar_h, id(font_small), mmh_s);
      }
