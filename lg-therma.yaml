# LG Therma V 7.0kW HM071MR.U44
#
# On the indoor remote controller:
# - Set modbus address to 0x01
#
# On the circuit board:
# - DIP SW1: Set 1 to the left (modbus slave)
# - DIP SW1: Set 2 to the left (modbus common 3rd party)
# - DIP SW2: Set 1 to the right
# - No termination resistor on the A/B terminals

esphome:
  name: lg-therma

esp32:
  board: esp32thing
  framework:
    type: arduino

external_components:
  - source: github://polyfloyd/esphome@template-climate
    components: [ template ]


logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  platform: esphome
  password: !secret ota_password

mqtt:
  broker: mqtt.local


uart:
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 9600
  id: uart_modbus
  parity: none
  data_bits: 8
  stop_bits: 1

modbus:
  id: modbus_lg
  uart_id: uart_modbus

modbus_controller:
  - id: lg
    address: 0x01  # The Modbus addr as configured in the LG Remote
    modbus_id: modbus_lg
    setup_priority: -10
    update_interval: 30s


switch:
  - platform: modbus_controller
    id: lg_therma_active
    icon: mdi:power
    modbus_controller_id: lg
    register_type: coil
    address: 0
    # Compensate for overshooting the target temperature on startup, causing the heat pump to shut
    # off prematurely.
    #
    # This is done by raising the target temperature to a higher value so the HP keeps running until
    # it has decided the pressure is high enough to keep running at lower power. This phase lasts
    # for about 1 hour.
    # During the next hour, the pressure and temperature slowly drop down while the compressor runs
    # at <20Hz.
    # If the target temperature is kept at the initial high setting, at some point the temperature
    # gets so far from the setpoint that the compressor will boost back up to full power, starting
    # over.
    # We want to keep running at low power after the initial startup, we do so by lowering the
    # setpoint after detecting the first temperature drop.
    on_turn_on:
      then:
        - if:
            condition:
              lambda: 'return id(reference).state == "Water Inlet";'
            then:
              - number.set:
                  id: true_setpoint
                  value: 30
              - wait_until:
                  condition:
                    lambda: "return id(inlet_temp).state > 30;"
              - wait_until:
                  condition:
                    lambda: "return id(inlet_temp).state < 29;"
              - number.set:
                  id: true_setpoint
                  value: 28
              - wait_until:
                  condition:
                    lambda: "return id(inlet_temp).state < 28;"
              - number.set:
                  id: true_setpoint
                  value: 27
              - wait_until:
                  condition:
                    lambda: "return id(inlet_temp).state < 27;"
              - number.set:
                  id: true_setpoint
                  value: 26

  - platform: modbus_controller
    id: lg_therma_silent_mode
    icon: mdi:volume-off
    modbus_controller_id: lg
    register_type: coil
    address: 2

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Low Flow"
    icon: mdi:pump-off
    register_type: discrete_input
    address: 0

  - platform: modbus_controller
    modbus_controller_id: lg
    id: pump_running
    name: "LG-Therma Pump Running"
    icon: mdi:pump
    register_type: discrete_input
    address: 1

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Compressor Running"
    icon: mdi:car-turbocharger
    register_type: discrete_input
    address: 3

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Defrosting"
    icon: mdi:snowflake-melt
    register_type: discrete_input
    address: 4

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Silent Mode On"
    icon: mdi:volume-off
    register_type: discrete_input
    address: 7

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Error"
    icon: mdi:alert-outline
    register_type: discrete_input
    address: 13

text_sensor:
  - platform: version
    name: "LG-Therma ESPHome Version"
    hide_timestamp: true
    state_topic: esphome/lg-therma/version

  - platform: template
    id: climate_action
    icon: mdi:sun-snowflake-variant

sensor:
  - platform: wifi_signal
    name: "LG-Therma WiFi Signal dB"
    update_interval: 10s
    state_topic: esphome/lg-therma/wifi_signal
    retain: false

  - platform: template
    id: climate_current_temperature
    lambda: !lambda |-
      if (id(reference).state == "Water Inlet") {
        return id(inlet_temp).state;
      } else if (id(reference).state == "Water Outlet") {
        return id(outlet_temp).state;
      }
      if (id(ext_temperature).state > 0) {
        return id(ext_temperature).state;
      }
      return id(int_temperature).state;

  - platform: modbus_controller
    modbus_controller_id: lg
    id: lg_therma_action_raw
    state_topic: null
    register_type: read
    register_count: 2
    address: 1
    value_type: U_WORD
    on_value:
      - text_sensor.template.publish:
          id: climate_action
          state: !lambda |-
            return x == 1 ? "COOLING"
                 : x == 2 ? "HEATING"
                 : (x == 0 && id(lg_therma_active).state) ? "IDLE"
                 : (x == 0 && !id(lg_therma_active).state) ? "OFF"
                 : "???";

  - platform: modbus_controller
    modbus_controller_id: lg
    id: inlet_temp
    name: "LG-Therma Water Inlet"
    icon: mdi:thermometer-chevron-down
    register_type: read
    address: 2
    register_count: 2
    value_type: S_WORD
    device_class: "temperature"
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: lg
    id: outlet_temp
    name: "LG-Therma Water Outlet"
    icon: mdi:thermometer-chevron-up
    register_type: read
    address: 3
    register_count: 2
    value_type: S_WORD
    device_class: "temperature"
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # reg read 4 outputs a constant -649
  # reg read 5 outputs a constant -649
  # reg read 6 outputs a constant 3000

  - platform: modbus_controller
    modbus_controller_id: lg
    id: int_temperature
    name: "LG-Therma Room Air Temperature"
    register_type: read
    address: 7
    register_count: 2
    value_type: S_WORD
    device_class: "temperature"
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: lg
    id: flow_rate
    name: "LG-Therma Flow Rate"
    icon: mdi:waves-arrow-right
    register_type: read
    address: 8
    register_count: 2
    value_type: U_WORD
    unit_of_measurement: "L/m"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
        # The flow rate has bogus readings when the pump is not running.
      - lambda: |-
          return id(pump_running).state ? x : 0.0;

  # reg read 9 outputs a constant -649
  # reg read 10 outputs a constant -646
  # reg read 11 outputs a constant 0

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Air Ingress Temperature"
    register_type: read
    address: 12
    register_count: 2
    value_type: S_WORD
    device_class: "temperature"
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # addresses 13,14,15 are not used
  # 16 is a mystery temperature sensor that seems to be somewhere outside.
  # reg read 17 outputs a constant 12000

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Refridgerant Cool"
    icon: mdi:thermometer-minus
    register_type: read
    address: 18
    register_count: 2
    value_type: S_WORD
    device_class: "temperature"
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Refridgerant Hot"
    icon: mdi:thermometer-plus
    register_type: read
    address: 19
    register_count: 2
    value_type: S_WORD
    device_class: "temperature"
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Air Egress Temperature"
    register_type: read
    address: 20
    register_count: 2
    value_type: S_WORD
    device_class: "temperature"
    unit_of_measurement: "°C"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

    # 21 is a mystery temperature sensor.

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Condenser Pressure"
    icon: mdi:gauge
    register_type: read
    address: 22
    register_count: 2
    value_type: U_WORD
    unit_of_measurement: mbar
    state_class: "measurement"

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Evaporator Pressure"
    icon: mdi:gauge-low
    register_type: read
    address: 23
    register_count: 2
    value_type: U_WORD
    unit_of_measurement: mbar
    state_class: "measurement"

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Compressor Speed"
    icon: mdi:car-turbocharger
    register_type: read
    address: 24
    value_type: U_WORD
    unit_of_measurement: "Hz"
    state_class: "measurement"
    accuracy_decimals: 0

  - platform: template
    id: water_delta_t
    name: "LG-Therma Water ΔT"
    icon: mdi:delta
    lambda: |-
      return id(outlet_temp).state - id(inlet_temp).state;
    unit_of_measurement: "°C"
    state_class: "measurement"

  - platform: template
    name: "LG-Therma Power Output"
    icon: mdi:heat-wave
    lambda: |-
      // Water has a specific heat of 4184 joule per kilogram/degree.
      const double specific_heat = 4184.0;
      double flow_lps = id(flow_rate).state / 60.0;
      // Δt * c * L/sec = Joule/sec = Watt
      return id(water_delta_t).state * specific_heat * flow_lps;
    unit_of_measurement: "Watt"
    state_class: "measurement"
    accuracy_decimals: 0

select:
  - platform: template
    id: climate_mode
    lambda: !lambda |-
        return id(lg_therma_active).state
             ? id(lg_therma_mode).state
             : std::string("OFF");
    update_interval: 1s
    set_action:
      - if:
          condition:
            lambda: 'return x != "OFF";'
          then:
            - switch.turn_on: lg_therma_active
            - select.set:
                id: lg_therma_mode
                option: !lambda return x;
          else:
            - switch.turn_off: lg_therma_active
    options:
      - "OFF"
      - "COOL"
      - "HEAT"
      - "AUTO"

  - platform: template
    id: climate_fan_mode
    lambda: !lambda |-
      return id(lg_therma_silent_mode).state
           ? std::string("QUIET")
           : std::string("ON");
    update_interval: 1s
    set_action:
      - if:
          condition:
            lambda: !lambda |-
              return x == "QUIET";
          then:
            - switch.turn_on: lg_therma_silent_mode
          else:
            - switch.turn_off: lg_therma_silent_mode
    options:
      - "ON"
      - "QUIET"

  - platform: modbus_controller
    modbus_controller_id: lg
    id: lg_therma_mode
    icon: mdi:sun-snowflake-variant
    address: 0
    value_type: U_WORD
    optionsmap:
      "COOL": 0
      "HEAT": 4
      "AUTO": 5

  - platform: modbus_controller
    modbus_controller_id: lg
    name: "LG-Therma Reference"
    id: reference
    icon: mdi:thermometer
    address: 1
    value_type: U_WORD
    optionsmap:
      "Water Outlet": 0
      "Water Inlet": 1
      "Room Air": 2

number:
  - platform: modbus_controller
    id: true_setpoint
    icon: mdi:thermometer
    address: 2
    min_value: 16
    max_value: 30
    step: 1
    multiply: 10
    device_class: "temperature"
    unit_of_measurement: "°C"

  - platform: modbus_controller
    id: ext_temperature
    name: "LG-Therma Set Room Air Temperature"
    icon: mdi:home-thermometer
    address: 3
    min_value: 0
    max_value: 40
    step: 1
    multiply: 10
    device_class: "temperature"
    unit_of_measurement: "°C"

climate:
  - platform: template
    name: "LG Therma"
    target_temperature_id: true_setpoint
    current_temperature_id: climate_current_temperature
    mode_id: climate_mode
    fan_mode_id: climate_fan_mode
    action_id: climate_action
    supported_modes:
      - "OFF"
      - "COOL"
      - "HEAT"
      - "AUTO"
    supported_fan_modes:
      - "ON"
      - "QUIET"
    visual:
      temperature_step: 0.5C
